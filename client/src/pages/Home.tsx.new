import React, { useState, useEffect } from "react";
import Sidebar from "@/components/Sidebar";
import EditorPanel from "@/components/EditorPanel";
import PropertiesPanel from "@/components/PropertiesPanel";
import SaveLayoutModal from "@/components/SaveLayoutModal";
import LoadLayoutModal from "@/components/LoadLayoutModal";
import { useFloorPlanStore } from "@/store/floorPlanStore";
import { useQuery } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/use-auth";
import { useLocation, useRoute } from "wouter";
import Header from "@/components/Header";
import { Loader2 } from "lucide-react";

interface HomeProps {
  restaurantId?: string;
}

const Home: React.FC<HomeProps> = ({ restaurantId: propRestaurantId }) => {
  console.log("Rendering Home component", { propRestaurantId });
  
  // State
  const [isSaveModalOpen, setIsSaveModalOpen] = useState(false);
  const [isLoadModalOpen, setIsLoadModalOpen] = useState(false);
  const [restaurantId, setRestaurantId] = useState<string | null>(propRestaurantId || null);
  
  // Store selectors
  const selectedElement = useFloorPlanStore((state) => state.selectedElement);
  
  // Hooks
  const { toast } = useToast();
  const { user, isLoading: isLoadingAuth } = useAuth();
  const [location, setLocation] = useLocation();
  const [, params] = useRoute('/floor-plan/:id');
  const urlRestaurantId = params?.id;
  
  // Handlers
  const handleSave = () => setIsSaveModalOpen(true);
  const handleLoad = () => setIsLoadModalOpen(true);
  const handleNew = () => useFloorPlanStore.getState().resetFloorPlan();
  
  // Redirect to auth if no user is found after loading
  useEffect(() => {
    if (!isLoadingAuth && !user) {
      setLocation('/auth');
      toast({
        title: "Authentication required",
        description: "Please sign in to access the floor plan designer",
      });
    }
  }, [isLoadingAuth, user, setLocation, toast]);
  
  // Get the user's restaurants
  const { data: userRestaurants, isLoading: isLoadingRestaurants } = useQuery({
    queryKey: ['/api/user/restaurants'],
    queryFn: async () => {
      if (!user) return [];
      const response = await fetch('/api/user/restaurants');
      if (!response.ok) throw new Error('Failed to fetch user restaurants');
      return response.json();
    },
    enabled: !!user,
  });
  
  // Set restaurant ID from props, URL or first restaurant
  useEffect(() => {
    let idToUse = null;
    
    if (propRestaurantId) {
      idToUse = propRestaurantId;
    } else if (urlRestaurantId) {
      idToUse = urlRestaurantId;
    } else if (userRestaurants?.length > 0) {
      idToUse = userRestaurants[0].restaurant.id;
    }
    
    if (idToUse) {
      console.log("Setting restaurant ID:", idToUse);
      setRestaurantId(idToUse);
      useFloorPlanStore.getState().setRestaurantId(idToUse);
    }
  }, [propRestaurantId, urlRestaurantId, userRestaurants]);
  
  // Get the restaurant data if we have an ID
  const { data: restaurant, isLoading: isLoadingRestaurant } = useQuery({
    queryKey: ['/api/restaurants', restaurantId],
    queryFn: async () => {
      if (!restaurantId) return null;
      const response = await fetch(`/api/restaurants/${restaurantId}`);
      if (!response.ok) throw new Error('Failed to fetch restaurant');
      return response.json();
    },
    enabled: !!restaurantId,
  });
  
  // Set the user ID in the floor plan store
  useEffect(() => {
    if (user) useFloorPlanStore.getState().setCreatedBy(user.id);
  }, [user]);
  
  // If loading, show a loading indicator
  if (isLoadingAuth || isLoadingRestaurants || (restaurantId && isLoadingRestaurant)) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-background">
        <div className="text-center">
          <Loader2 className="h-8 w-8 animate-spin text-primary mx-auto mb-4" />
          <h2 className="text-lg font-medium">Loading Floor Plan Designer...</h2>
          <p className="text-sm text-muted-foreground mt-2">Preparing your workspace</p>
        </div>
      </div>
    );
  }

  // Debug info
  console.log("Floor plan render with data:", {
    restaurantId,
    restaurant: restaurant?.name,
    hasUser: !!user,
    selectedElement: selectedElement?.name
  });
  
  // Use strict inline styles to ensure components render correctly
  return (
    <div className="h-screen flex flex-col overflow-hidden bg-background">
      {/* Header */}
      <div style={{ flexShrink: 0 }}>
        <Header
          title={restaurant ? `${restaurant.name} - Floor Plan` : "Floor Plan Designer"}
          onSave={handleSave}
          onLoad={handleLoad}
          onNew={handleNew}
        />
      </div>
      
      {/* Main Content */}
      <div style={{ 
        flex: '1 1 auto', 
        display: 'flex', 
        overflow: 'hidden', 
        minHeight: 0,
        backgroundColor: 'var(--background)'
      }}>
        {/* Sidebar */}
        <div style={{ 
          width: '280px', 
          height: '100%', 
          overflow: 'auto', 
          borderRight: '1px solid var(--border)' 
        }}>
          <Sidebar />
        </div>
        
        {/* Editor */}
        <div style={{ 
          flex: '1 1 auto', 
          height: '100%', 
          overflow: 'auto',
          display: 'flex',
          flexDirection: 'column'
        }}>
          <EditorPanel />
        </div>
        
        {/* Properties Panel (conditionally rendered) */}
        {selectedElement && (
          <div style={{
            width: '300px',
            height: '100%',
            overflow: 'auto',
            borderLeft: '1px solid var(--border)'
          }}>
            <PropertiesPanel 
              selectedElement={selectedElement}
              onClose={() => useFloorPlanStore.getState().selectElement(null)}
            />
          </div>
        )}
      </div>

      {/* Modals */}
      {user && (
        <>
          <SaveLayoutModal 
            isOpen={isSaveModalOpen}
            onClose={() => setIsSaveModalOpen(false)}
            restaurantId={restaurantId || undefined}
            userId={user.id}
          />
          
          <LoadLayoutModal 
            isOpen={isLoadModalOpen}
            onClose={() => setIsLoadModalOpen(false)}
            restaurantId={restaurantId || undefined}
          />
        </>
      )}
    </div>
  );
};

export default Home;